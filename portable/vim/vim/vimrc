" ----- leader / builtins -----
let g:mapleader = ','
let g:did_install_default_menus = 1
let g:loaded_sql_completion = 1

" ----- mouse / clipboard -----
set mouse=
set clipboard+=unnamedplus,unnamed

" ----- files / swap / backup / undo -----
set noswapfile
let backupdir = expand('~/.local/share/vim/backup//')
let undodir   = expand('~/.local/share/vim/undo//')
if !isdirectory(fnamemodify(backupdir, ':p'))
  call mkdir(fnamemodify(backupdir, ':p'), 'p', 0700)
endif
if !isdirectory(fnamemodify(undodir, ':p'))
  call mkdir(fnamemodify(undodir, ':p'), 'p', 0700)
endif
execute 'set backupdir=' . fnameescape(backupdir)
set backup
set backupcopy=yes
execute 'set undodir=' . fnameescape(undodir)
set undofile

" ----- timing / editing -----
set timeoutlen=250
set hidden
set history=500
set lazyredraw
set synmaxcol=3000
set updatetime=250

" ----- esc timing -----
set ttimeout
set ttimeoutlen=10
set timeoutlen=400

" ----- syntax / ft / indent -----
syntax on
filetype plugin indent on

" ----- colors -----
" I don't like complex one
" set termguicolors
set background=light
silent! colorscheme default-ir

" ----- cursor -----
let &t_SI = "\e[6 q"  " Insert: steady bar
let &t_SR = "\e[4 q"  " Replace: steady underline
let &t_EI = "\e[2 q"  " Normal: steady block

" ----- wildmenu -----
set wildmenu
set wildoptions=pum

" ----- ui -----
set wrap
set number
set showmatch
set smoothscroll
set signcolumn=yes
let &pumheight = 10
set completeopt=menu,menuone,noselect,noinsert,popup,fuzzy

" ----- search -----
set ignorecase
set smartcase
set incsearch
set hlsearch

" ----- splits -----
set splitright
set splitbelow

" ----- folding (safe fallback) -----
set foldenable
set foldlevelstart=99
set foldmethod=manual
set foldcolumn=0

" ----- wildignore / list / tabs -----
set wildignorecase
let &wildignore = join([
      \ '*.o',
      \ '*.obj',
      \ '*.class',
      \ '*.pyc',
      \ '*.pyo',
      \ '*.DS_Store',
      \ '*.zip',
      \ '*.tar',
      \ '*.gz',
      \ '*.bz2',
      \ '*.7z',
      \ 'node_modules/**',
      \ 'dist/**',
      \ 'build/**',
      \ 'coverage/**',
      \ '.git/**',
      \ '.hg/**',
      \ '.svn/**',
      \ '*.lock',
      \ '__pycache__/**',
      \ '.mypy_cache/**',
      \ '.pytest_cache/**'
      \ ], ',')
set expandtab
set smartindent
set tabstop=2
set softtabstop=2
set list
let &listchars = join([
      \ 'tab:> ',
      \ 'extends:‚ùØ',
      \ 'precedes:‚ùÆ',
      \ 'nbsp:&',
      \ 'trail:~',
      \ 'leadmultispace:|   '
      \ ], ',')
let &wildcharm = char2nr("\t")

" Netrw settings
let g:netrw_list_hide = '^\./\=$\|^\.\./\=$'
let g:netrw_hide = 1

" ----- keymaps -----
nnoremap <silent> <leader>a <Cmd>nohl<CR>
nnoremap <silent> <leader>w <Cmd>write<CR>
nnoremap <silent> <leader>r <Cmd>edit<CR>

" Search for word under cursor
nnoremap <silent> // <Cmd>vimgrep /<C-R><C-W>/g %<CR>
xnoremap <silent> // y:execute 'vimgrep /' .. escape(@", '/\') .. '/g %'<CR>

" Navigate
nnoremap <silent> ]q <Cmd>cnext<CR>
nnoremap <silent> [q <Cmd>cprev<CR>
nnoremap <silent> ]l <Cmd>lnext<CR>
nnoremap <silent> [l <Cmd>lprev<CR>

nnoremap <C-s>r :%s/\<<C-r><C-w>\>//gc<left><left><left>
nnoremap <C-s>R :%s/\<<C-r><C-w>\>//g<left><left>
vnoremap <C-s>r :s/\%V/gc<left><left><left>
vnoremap <C-s>R :s/\%V/g<left><left>

" Change * and #
nnoremap * #N
nnoremap # *N
vnoremap # y:let @/='\V'.substitute(escape(@", '\'), '/', '\\/', 'g')<CR>n
vnoremap * y:let @/='\V'.substitute(escape(@", '\'), '/', '\\/', 'g')<CR>N

" Remap q and @ for macros
noremap  <silent> q <Nop>
noremap  <silent> @ <Nop>
nnoremap <silent> @@ q
nnoremap <silent> qq @

" Format things
nnoremap <silent><nowait> == <Cmd>call utils#Preserve('normal! gg=G')<CR>
nnoremap <silent><nowait> gq <Cmd>call utils#Preserve('normal! ggVGgq')<CR>

" Tabs
nnoremap <silent> to <Cmd>tabnew<CR>
nnoremap <silent> tq <Cmd>tabclose<CR>
nnoremap <silent> tn <Cmd>tabnext<CR>
nnoremap <silent> tp <Cmd>tabprev<CR>

" Move cursor to start/end in insert mode
inoremap <C-a> <Esc>^i
inoremap <C-e> <Esc>$a

" Quickfix
nnoremap <silent> qn <Cmd>cnext<CR>
nnoremap <silent> qp <Cmd>cprev<CR>
nnoremap <silent> qo <Cmd>copen<CR>

" Marks (use only `, and swap ' and m)
noremap <silent> ' <Nop>
noremap <silent> ` <Nop>
noremap <silent> m <Nop>
nnoremap <silent> m `
nnoremap <silent> ' m
nnoremap <silent> mm <Cmd>marks<CR>
nnoremap dm :delmarks<Space>

" Undo tree
nnoremap <silent> qu <Cmd>UndotreeToggle<CR>

nnoremap <leader>y <Cmd>let @*=expand('%:p')<CR>:echo 'Copied to clipboard'<CR>

" delete to black-hole, then put before cursor
xnoremap p "_dP

" commandline
cnoremap <C-a> <Home>

" ----- commands / packages -----
command! BufOnly %bd | e# | bd#
silent! packadd cfilter

" ----- my records -----
let @k = "'t$a;mt"
