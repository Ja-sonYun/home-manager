#!/usr/bin/env bash
set -euo pipefail

require_cmd() { command -v "$1" >/dev/null 2>&1 || {
    echo "Missing command: $1" >&2
    exit 1
}; }
require_cmd jq
require_cmd curl
require_cmd sed

latest_pypi_version() {
    local name="$1"
    curl -sL "https://pypi.org/pypi/${name}/json" | jq -r '.info.version'
}

urlencode_npm_pkg() {
    printf '%s' "$1" | sed -e 's/@/%40/g' -e 's/\//%2F/g'
}

latest_npm_version() {
    local name="$1"
    local enc
    enc=$(urlencode_npm_pkg "$name")
    curl -sL "https://registry.npmjs.org/${enc}" | jq -r '."dist-tags".latest'
}

update_versions_in_file() {
    local file="$1"
    local updated=0

    if grep -q 'mkNpmGlobalPackageDerivation' "$file"; then
        awk '/packages\s*=\s*\[/{flag=1;next}/\]/{flag=0}flag' "$file" \
        | sed -n 's/.*"\(.*\)".*/\1/p' | while read -r line; do
            [[ -z "$line" ]] && continue
            base="${line%@*}"
            ver="${line##*@}"
            [[ "$base" == "$line" ]] && continue
            latest=$(latest_npm_version "$base" || true)
            if [[ -n "$latest" && "$latest" != "$ver" ]]; then
                sed -i "s|\"${base}@${ver}\"|\"${base}@${latest}\"|" "$file"
                echo "Updated npm ${base}: ${ver} -> ${latest}"
                echo "$file" >> "$UPDATED_LIST"
                updated=1
            fi
        done
    fi

    if grep -q 'mkPipGlobalPackageDerivation' "$file"; then
        awk '/packages\s*=\s*\[/{flag=1;next}/\]/{flag=0}flag' "$file" \
        | sed -n 's/.*"\(.*\)".*/\1/p' | while read -r line; do
            [[ -z "$line" ]] && continue
            [[ "$line" == git+* ]] && continue
            if [[ "$line" == *"=="* ]]; then
                name="${line%%==*}"
                ver="${line##*==}"
                latest=$(latest_pypi_version "$name" || true)
                if [[ -n "$latest" && "$latest" != "$ver" ]]; then
                    sed -i "s|\"${name}==${ver}\"|\"${name}==${latest}\"|" "$file"
                    echo "Updated pip ${name}: ${ver} -> ${latest}"
                    echo "$file" >> "$UPDATED_LIST"
                    updated=1
                fi
            fi
        done
    fi
    return $updated
}

main() {
    local root="${1:-.}"
    UPDATED_LIST=$(mktemp)
    trap 'rm -f "$UPDATED_LIST"' EXIT

    grep -rl 'mk.*GlobalPackageDerivation' "$root" | while read -r f; do
        update_versions_in_file "$f" || true
    done

    sort -u "$UPDATED_LIST" | while read -r changed; do
        echo "Running ./scripts/update-output-hash $changed"
        ./scripts/update-output-hash "$changed"
    done
}

main "$@"

