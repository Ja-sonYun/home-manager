#!/usr/bin/env zsh

function shorten-pwd {
    # Replace the home directory with ~ and split the path into an array using / as the delimiter
    local -a path_parts
    path_parts=("${(@s:/:)${PWD/#$HOME/~}}")

    # Process each element
    for i in {1..$#path_parts}; do
        # Skip the home directory (~), empty elements, and the last element
        if [[ $path_parts[i] != "~" ]] && [[ -n $path_parts[i] ]] && (( i < $#path_parts )); then
            # Abbreviate the element to the first three characters and add ' '
            path_parts[i]=${path_parts[i][1,3]}…
        fi
    done

    # Join the elements back into a string
    local new_path="${(j:/:)path_parts}"
    echo "$new_path"
}

function shorten-string {
    maxlen="$1"
    shift
    str="$@"

    # If the string length is less than or equal to maxlen, return the string as is
    if (( ${#str} <= maxlen )); then
        echo "$str"
        exit 0
    fi

    # Calculate the length to keep at the end of the string
    end_len=$((maxlen / 2))

    # Ensure that the total length is not more than maxlen
    start_len=$((maxlen - end_len - 1))

    echo "${str:0:$start_len}…${str: -end_len}"
}

log_path="/tmp/tmux_popup_log"

if [ ! -f "$log_path" ]; then
    touch $log_path
fi

buf=""

# if current project is child of git project, show git branch
is_git=$(git rev-parse --is-inside-work-tree)

if [[ $is_git == "true" ]]; then
    GIT_BRANCH=$(shorten-string 20 $(git branch --show-current))
    buf="#[fg=red]${GIT_BRANCH}#[fg=default]"
    buf="#[fg=grey]Git#[fg=default]($buf):"
fi

message=$(tail -1 $log_path)

PWD=$(shorten-pwd)
buf="${message} - ${buf}${PWD}"

# tracking=$(timew | awk 'NR == 1 { print $2 }')
# if [[ "$tracking" != "is" ]]; then
#     tracking=" #[bg=black] #[fg=red]*#[fg=green][$tracking]#[fg=default bg=default]"
# else
#     tracking=""
# fi

# buf="${buf}${racking}"


echo "${buf}"
