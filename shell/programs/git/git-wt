#!/usr/bin/env bash
set -euo pipefail

err() {
    echo "error: $*" >&2
    exit 1
}
inside_repo() { git rev-parse --is-inside-work-tree >/dev/null 2>&1; }
safe() { echo "${1//\//-}"; }

repo_paths() {
    local root parent base
    root="$(git rev-parse --show-toplevel)" || err "not a git repo"
    parent="$(dirname "$root")"
    base="$(basename "$root")"
    echo "$parent" "$base"
}

find_wt_by_branch() {
    local br="$1"
    git worktree list --porcelain | awk -v br="$br" '
    $1=="worktree"{p=$2}
    $1=="branch" && $2=="refs/heads/"br{print p; exit}
  '
}

default_wt_path_for_branch() {
    local br="$1"
    read -r parent base < <(repo_paths)
    echo "${parent}/${base}+$(safe "$br")"
}

resolve_branch_path() {
    local br="$1"
    local path
    path="$(find_wt_by_branch "$br" || true)"
    if [ -n "$path" ]; then
        echo "$path"
    else
        echo "$(default_wt_path_for_branch "$br")"
    fi
}

cmd_checkout() {
    if [[ "${1:-}" == "-b" ]]; then
        shift
        local br="${1:-}"
        [ -n "$br" ] || err "usage: git wt checkout -b <branch> [<start>]"
        local start="${2:-}"
        local dest
        dest="$(default_wt_path_for_branch "$br")"
        if [ -n "$start" ]; then
            git worktree add -b "$br" "$dest" "$start"
        else
            git worktree add -b "$br" "$dest"
        fi
        echo "$dest"
    else
        local br="${1:-}"
        [ -n "$br" ] || err "usage: git wt checkout <branch>"
        if ! git show-ref --verify --quiet "refs/heads/$br"; then
            err "branch not found: $br"
        fi
        local path
        path="$(find_wt_by_branch "$br" || true)"
        if [ -n "$path" ]; then
            echo "$path"
        else
            local dest
            dest="$(default_wt_path_for_branch "$br")"
            git worktree add "$dest" "$br"
            echo "$dest"
        fi
    fi
}

cmd_rm() {
    local br="${1:-}"
    [ -n "$br" ] || err "usage: git wt rm <branch>"
    local path
    path="$(resolve_branch_path "$br")"
    git worktree remove "$path"
}

cmd_unlock() {
    local br="${1:-}"
    [ -n "$br" ] || err "usage: git wt unlock <branch>"
    local path
    path="$(resolve_branch_path "$br")"
    git worktree unlock "$path"
}

cmd_lock() {
    local br="${1:-}"
    [ -n "$br" ] || err "usage: git wt lock <branch>"
    local path
    path="$(resolve_branch_path "$br")"
    git worktree lock "$path"
}

cmd_repair() {
    local br="${1:-}"
    [ -n "$br" ] || err "usage: git wt repair <branch>"
    local path
    path="$(resolve_branch_path "$br")"
    git worktree repair "$path"
}

main() {
    inside_repo || err "not a git repo"
    case "${1:-}" in
    checkout)
        shift
        cmd_checkout "$@"
        ;;
    rm)
        shift
        cmd_rm "$@"
        ;;
    unlock)
        shift
        cmd_unlock "$@"
        ;;
    lock)
        shift
        cmd_lock "$@"
        ;;
    repair)
        shift
        cmd_repair "$@"
        ;;
    ls)
        shift
        git worktree list "$@"
        ;;
    prune)
        shift
        git worktree prune "$@"
        ;;
    -h | --help | *)
        echo "usage: git wt checkout [-b] <branch>"
        echo "   or: git wt ls [-v | --porcelain [-z]]"
        echo "   or: git wt lock [--reason <string>] <worktree>"
        echo "   or: git wt prune [-n] [-v] [--expire <expire>]"
        echo "   or: git wt rm [-f] <worktree>"
        echo "   or: git wt repair [<path>...]"
        echo "   or: git wt unlock <worktree>"
        echo
        ;;
    esac
}
main "$@"
